public class Lista {

    private Elemento inicio, atual, aux;

    public boolean verificar(){
      return inicio==null;
    }
    
    public void inserir(Object objeto) {
      if(verificar()){
        inicio=new Elemento(objeto,null,null);
        aux=inicio;
      }else{
         atual=new Elemento(objeto,null,aux);
         aux.setProx(atual);
         aux=atual;
      }
    }
    
    /**
     * Inserir um elemento na lista duplamnete ligada, co
     * base na posicao, A posicao sera entre o inicio e o fim
     * lista.
     * @param object Object
     * @param posicao int 
     */
    public void inserir(Object object, int posicao){
    if(posicao>0 && posicao<contar()){
        Elemento e=inicio, novo;
        for(int i=1;i<posicao;i++){
         e=e.getProx();
        
    
        }
       novo=new Elemento(object,e.getProx(), e);
       e.getProx().setAnt(novo);
       e.setProx(novo);
    }else{
        throw new IllegalArgumentException("");
    }
        
        
    } 
    
    
    
    public void exibir(){
     Elemento e=inicio;
     while(e!=null){
         System.out.println(e.getObjeto());
         e=e.getProx();
     }
    }
    
    public Elemento buscar(int id){
      Elemento e=inicio;
      Contato c;
      while(e!=null){
         c=(Contato)e.getObjeto();
         if(id==c.getId()){
           return e;
         }
         e=e.getProx();
      }
      return null;
    }

    public void remover(int id){
      Elemento e=buscar(id);
      if(e!=null){
        if(e==inicio){//Remoção do primeiro elemento
          inicio=e.getProx();
          e.setProx(null);
          inicio.setAnt(null);
        }else if(e==atual){
           aux=e.getAnt();
           atual=aux;
           e.setAnt(null);
           atual.setProx(null);
        }else{
           e.getAnt().setProx(e.getProx());
           e.getProx().setAnt(e.getAnt());
           e.setAnt(null);
           e.setProx(null);
        }
      }
    }
    
    public int contar(){
     Elemento e=inicio;
     int cont=0;
        while (e != null) {
            cont++;
            e = e.getProx();
        }
     return cont;
    }
}
